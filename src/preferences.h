#pragma once

// DO NOT EDIT THIS FILE
// This file was automatically generated by configuration-parser
// There will be a .conf file somewhere which was used to generate this file
// See https://github.com/tcanabrava/configuration-parser

#include <functional>
#include <QObject>

#include <QString>
#include <QStandardPaths>


class General : public QObject {
	Q_OBJECT
	Q_PROPERTY(int beats_per_minute READ beatsPerMinute WRITE setBeatsPerMinute NOTIFY beatsPerMinuteChanged)

public:
	General(QObject *parent = 0);
	 void loadDefaults();
	int beatsPerMinute() const;
	void setBeatsPerMinuteRule(std::function<bool(int)> rule);
	int beatsPerMinuteDefault() const;

public:
	 Q_SLOT void setBeatsPerMinute(int value);
	 Q_SIGNAL void beatsPerMinuteChanged(int value);

private:
	int _beatsPerMinute;
	std::function<bool(int)> beatsPerMinuteRule;
};

class Harmonica : public QObject {
	Q_OBJECT
	Q_PROPERTY(QString partiture_folder READ partitureFolder WRITE setPartitureFolder NOTIFY partitureFolderChanged)

public:
	Harmonica(QObject *parent = 0);
	 void loadDefaults();
	QString partitureFolder() const;
	void setPartitureFolderRule(std::function<bool(QString)> rule);
	QString partitureFolderDefault() const;

public:
	 Q_SLOT void setPartitureFolder(const QString& value);
	 Q_SIGNAL void partitureFolderChanged(const QString& value);

private:
	QString _partitureFolder;
	std::function<bool(QString)> partitureFolderRule;
};

class Preferences : public QObject {
	Q_OBJECT
Q_PROPERTY(QObject* general MEMBER _general CONSTANT)
Q_PROPERTY(QObject* harmonica MEMBER _harmonica CONSTANT)

public:
	void sync();
	void load();
	static Preferences* self();
	 void loadDefaults();
	General *general() const;
	Harmonica *harmonica() const;

private:
	General *_general;
	Harmonica *_harmonica;
	Preferences(QObject *parent = 0);
};

